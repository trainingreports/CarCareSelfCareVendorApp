{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Vishal-Android\\\\Documents\\\\GitHub\\\\self-care-car-care\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Images } from \"./constants\";\nimport { AppLoading } from 'expo';\nimport { NavigationContainer } from '@react-navigation/native';\nimport Screens from \"./navigation/Screens\";\nvar assetImages = [Images.Logo, Images.LoginBackGround, Images.NotificationIcon];\n\nfunction cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isLoadingComplete: false,\n      fontLoaded: false\n    };\n\n    _this._loadResourcesAsync = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                'montserrat-regular': require(\"./assets/font/Montserrat-Regular.ttf\"),\n                'montserrat-bold': require(\"./assets/font/Montserrat-Bold.ttf\")\n              }));\n\n            case 2:\n              _this.setState({\n                fontLoaded: true\n              });\n\n              return _context.abrupt(\"return\", Promise.all(_toConsumableArray(cacheImages(assetImages))));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._handleLoadingError = function (error) {\n      console.warn(error);\n    };\n\n    _this._handleFinishLoading = function () {\n      if (_this.state.fontLoaded) {\n        _this.setState({\n          isLoadingComplete: true\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isLoadingComplete) {\n        return React.createElement(AppLoading, {\n          startAsync: this._loadResourcesAsync,\n          onError: this._handleLoadingError,\n          onFinish: this._handleFinishLoading\n        });\n      } else {\n        return React.createElement(NavigationContainer, null, React.createElement(Screens, null));\n      }\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/Vishal-Android/Documents/GitHub/self-care-car-care/App.js"],"names":["React","Font","Asset","Images","AppLoading","NavigationContainer","Screens","assetImages","Logo","LoginBackGround","NotificationIcon","cacheImages","images","map","image","Image","prefetch","fromModule","downloadAsync","App","state","isLoadingComplete","fontLoaded","_loadResourcesAsync","loadAsync","require","setState","Promise","all","_handleLoadingError","error","console","warn","_handleFinishLoading","Component"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,SAASC,MAAT;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP;AAEA,IAAMC,WAAW,GAAG,CAClBJ,MAAM,CAACK,IADW,EAElBL,MAAM,CAACM,eAFW,EAGlBN,MAAM,CAACO,gBAHW,CAApB;;AAMA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAOA,MAAM,CAACC,GAAP,CAAW,UAAAC,KAAK,EAAI;AACzB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAP;AACD,KAFD,MAEO;AACL,aAAOZ,KAAK,CAACe,UAAN,CAAiBH,KAAjB,EAAwBI,aAAxB,EAAP;AACD;AACF,GANM,CAAP;AAOD;;IAEoBC,G;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,iBAAiB,EAAE,KADb;AAENC,MAAAA,UAAU,EAAE;AAFN,K;;UAuBRC,mB,GAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACdtB,IAAI,CAACuB,SAAL,CAAe;AACnB,sCAAsBC,OAAO,wCADV;AAEnB,mCAAmBA,OAAO;AAFP,eAAf,CADc;;AAAA;AAMpB,oBAAKC,QAAL,CAAc;AAAEJ,gBAAAA,UAAU,EAAE;AAAd,eAAd;;AANoB,+CAObK,OAAO,CAACC,GAAR,oBAAgBjB,WAAW,CAACJ,WAAD,CAA3B,EAPa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAUtBsB,mB,GAAsB,UAAAC,KAAK,EAAI;AAG7BC,MAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACD,K;;UAEDG,oB,GAAuB,YAAM;AAC3B,UAAI,MAAKb,KAAL,CAAWE,UAAf,EAA2B;AACzB,cAAKI,QAAL,CAAc;AAAEL,UAAAA,iBAAiB,EAAE;AAArB,SAAd;AACD;AACF,K;;;;;;;6BAtCQ;AACP,UAAI,CAAC,KAAKD,KAAL,CAAWC,iBAAhB,EAAmC;AACjC,eACE,oBAAC,UAAD;AACE,UAAA,UAAU,EAAE,KAAKE,mBADnB;AAEE,UAAA,OAAO,EAAE,KAAKM,mBAFhB;AAGE,UAAA,QAAQ,EAAE,KAAKI;AAHjB,UADF;AAOD,OARD,MAQO;AACL,eACE,oBAAC,mBAAD,QACE,oBAAC,OAAD,OADF,CADF;AAKD;AACF;;;;EAtB8BjC,KAAK,CAACkC,S;;SAAlBf,G","sourcesContent":["import React from 'react';\r\nimport * as Font from 'expo-font';\r\nimport { Asset } from 'expo-asset';\r\nimport { Image } from 'react-native';\r\nimport { Images } from './constants';\r\nimport { AppLoading } from 'expo';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\n\r\nimport Screens from './navigation/Screens';\r\n\r\nconst assetImages = [\r\n  Images.Logo,\r\n  Images.LoginBackGround,\r\n  Images.NotificationIcon\r\n];\r\n\r\nfunction cacheImages(images) {\r\n  return images.map(image => {\r\n    if (typeof image === 'string') {\r\n      return Image.prefetch(image);\r\n    } else {\r\n      return Asset.fromModule(image).downloadAsync();\r\n    }\r\n  });\r\n}\r\n\r\nexport default class App extends React.Component {\r\n  state = {\r\n    isLoadingComplete: false,\r\n    fontLoaded: false\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.isLoadingComplete) {\r\n      return (\r\n        <AppLoading\r\n          startAsync={this._loadResourcesAsync}\r\n          onError={this._handleLoadingError}\r\n          onFinish={this._handleFinishLoading}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <NavigationContainer>\r\n          <Screens />\r\n        </NavigationContainer>\r\n      );\r\n    }\r\n  }\r\n\r\n  _loadResourcesAsync = async () => {\r\n    await Font.loadAsync({\r\n      'montserrat-regular': require('./assets/font/Montserrat-Regular.ttf'),\r\n      'montserrat-bold': require('./assets/font/Montserrat-Bold.ttf')\r\n    });\r\n\r\n    this.setState({ fontLoaded: true });\r\n    return Promise.all([...cacheImages(assetImages)]);\r\n  };\r\n\r\n  _handleLoadingError = error => {\r\n    // In this case, you might want to report the error to your error\r\n    // reporting service, for example Sentry\r\n    console.warn(error);\r\n  };\r\n\r\n  _handleFinishLoading = () => {\r\n    if (this.state.fontLoaded) {\r\n      this.setState({ isLoadingComplete: true });\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}