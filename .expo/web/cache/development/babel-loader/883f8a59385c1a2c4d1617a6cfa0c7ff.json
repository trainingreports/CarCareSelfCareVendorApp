{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Vishal-Android\\\\Documents\\\\GitHub\\\\self-care-car-care\\\\node_modules\\\\react-native-otp-textinput\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PropTypes from \"prop-types\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  textInput: {\n    height: 50,\n    width: 50,\n    borderBottomWidth: 4,\n    margin: 5,\n    textAlign: \"center\",\n    fontSize: 22,\n    fontWeight: \"500\",\n    color: \"#000000\"\n  }\n});\n\nvar getOTPTextChucks = function getOTPTextChucks(inputCount, inputCellLength, text) {\n  var otpText = text.match(new RegExp(\".{1,\" + inputCellLength + \"}\", \"g\")) || [];\n  otpText = otpText.slice(0, inputCount);\n  return otpText;\n};\n\nvar OTPTextView = function (_Component) {\n  _inherits(OTPTextView, _Component);\n\n  var _super = _createSuper(OTPTextView);\n\n  function OTPTextView(props) {\n    var _this;\n\n    _classCallCheck(this, OTPTextView);\n\n    _this = _super.call(this, props);\n\n    _this.basicValidation = function (text) {\n      var validText = /^[0-9a-zA-Z]+$/;\n      return text.match(validText);\n    };\n\n    _this.onTextChange = function (text, i) {\n      var _this$props = _this.props,\n          inputCellLength = _this$props.inputCellLength,\n          inputCount = _this$props.inputCount,\n          handleTextChange = _this$props.handleTextChange;\n\n      if (text && !_this.basicValidation(text)) {\n        return;\n      }\n\n      _this.setState(function (prevState) {\n        var otpText = prevState.otpText;\n        otpText[i] = text;\n        return {\n          otpText: otpText\n        };\n      }, function () {\n        handleTextChange(_this.state.otpText.join(\"\"));\n\n        if (text.length === inputCellLength && i !== inputCount - 1) {\n          _this.inputs[i + 1].focus();\n        }\n      });\n    };\n\n    _this.onInputFocus = function (i) {\n      var otpText = _this.state.otpText;\n      var prevIndex = i - 1;\n\n      if (prevIndex > -1 && !otpText[prevIndex] && !otpText.join(\"\")) {\n        _this.inputs[prevIndex].focus();\n\n        return;\n      }\n\n      _this.setState({\n        focusedInput: i\n      });\n    };\n\n    _this.onKeyPress = function (e, i) {\n      var val = _this.state.otpText[i] || \"\";\n\n      if (e.nativeEvent.key === \"Backspace\" && i !== 0 && !(val.length - 1)) {\n        _this.inputs[i - 1].focus();\n      }\n    };\n\n    _this.clear = function () {\n      _this.setState({\n        otpText: []\n      }, function () {\n        _this.inputs[0].focus();\n      });\n    };\n\n    _this.setValue = function (value) {\n      var _this$props2 = _this.props,\n          inputCount = _this$props2.inputCount,\n          inputCellLength = _this$props2.inputCellLength;\n\n      _this.setState({\n        otpText: getOTPTextChucks(inputCount, inputCellLength, value)\n      }, function () {\n        _this.props.handleTextChange(value);\n      });\n    };\n\n    _this.state = {\n      focusedInput: 0,\n      otpText: getOTPTextChucks(props.inputCount, props.inputCellLength, props.defaultValue)\n    };\n    _this.inputs = [];\n    return _this;\n  }\n\n  _createClass(OTPTextView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          inputCount = _this$props3.inputCount,\n          offTintColor = _this$props3.offTintColor,\n          tintColor = _this$props3.tintColor,\n          defaultValue = _this$props3.defaultValue,\n          inputCellLength = _this$props3.inputCellLength,\n          containerStyle = _this$props3.containerStyle,\n          textInputStyle = _this$props3.textInputStyle,\n          keyboardType = _this$props3.keyboardType,\n          textInputProps = _objectWithoutProperties(_this$props3, [\"inputCount\", \"offTintColor\", \"tintColor\", \"defaultValue\", \"inputCellLength\", \"containerStyle\", \"textInputStyle\", \"keyboardType\"]);\n\n      var _this$state = this.state,\n          focusedInput = _this$state.focusedInput,\n          otpText = _this$state.otpText;\n      var TextInputs = [];\n\n      var _loop = function _loop(i) {\n        var inputStyle = [styles.textInput, textInputStyle, {\n          borderColor: offTintColor\n        }];\n\n        if (focusedInput === i) {\n          inputStyle.push({\n            borderColor: tintColor\n          });\n        }\n\n        TextInputs.push(React.createElement(TextInput, _extends({\n          ref: function ref(e) {\n            _this2.inputs[i] = e;\n          },\n          key: i,\n          autoCorrect: false,\n          keyboardType: keyboardType,\n          autoFocus: false,\n          value: otpText[i] || \"\",\n          style: inputStyle,\n          maxLength: _this2.props.inputCellLength,\n          onFocus: function onFocus() {\n            return _this2.onInputFocus(i);\n          },\n          onChangeText: function onChangeText(text) {\n            return _this2.onTextChange(text, i);\n          },\n          multiline: false,\n          onKeyPress: function onKeyPress(e) {\n            return _this2.onKeyPress(e, i);\n          }\n        }, textInputProps)));\n      };\n\n      for (var i = 0; i < inputCount; i += 1) {\n        _loop(i);\n      }\n\n      return React.createElement(View, {\n        style: [styles.container, containerStyle]\n      }, TextInputs);\n    }\n  }]);\n\n  return OTPTextView;\n}(Component);\n\nOTPTextView.propTypes = {\n  defaultValue: PropTypes.string,\n  inputCount: PropTypes.number,\n  containerStyle: PropTypes.any,\n  textInputStyle: PropTypes.any,\n  inputCellLength: PropTypes.number,\n  tintColor: PropTypes.string,\n  offTintColor: PropTypes.string,\n  handleTextChange: PropTypes.func,\n  inputType: PropTypes.string,\n  keyboardType: PropTypes.string\n};\nOTPTextView.defaultProps = {\n  defaultValue: \"\",\n  inputCount: 4,\n  tintColor: \"#3CB371\",\n  offTintColor: \"#DCDCDC\",\n  inputCellLength: 1,\n  containerStyle: {},\n  textInputStyle: {},\n  handleTextChange: function handleTextChange() {},\n  keyboardType: \"numeric\"\n};\nexport default OTPTextView;","map":{"version":3,"sources":["C:/Users/Vishal-Android/Documents/GitHub/self-care-car-care/node_modules/react-native-otp-textinput/index.js"],"names":["React","Component","PropTypes","styles","StyleSheet","create","container","flexDirection","justifyContent","textInput","height","width","borderBottomWidth","margin","textAlign","fontSize","fontWeight","color","getOTPTextChucks","inputCount","inputCellLength","text","otpText","match","RegExp","slice","OTPTextView","props","basicValidation","validText","onTextChange","i","handleTextChange","setState","prevState","state","join","length","inputs","focus","onInputFocus","prevIndex","focusedInput","onKeyPress","e","val","nativeEvent","key","clear","setValue","value","defaultValue","offTintColor","tintColor","containerStyle","textInputStyle","keyboardType","textInputProps","TextInputs","inputStyle","borderColor","push","propTypes","string","number","any","func","inputType","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { View, TextInput, StyleSheet } from \"react-native\";\nimport PropTypes from \"prop-types\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    height: 50,\n    width: 50,\n    borderBottomWidth: 4,\n    margin: 5,\n    textAlign: \"center\",\n    fontSize: 22,\n    fontWeight: \"500\",\n    color: \"#000000\",\n  },\n});\n\nconst getOTPTextChucks = (inputCount, inputCellLength, text) => {\n  let otpText =\n    text.match(new RegExp(\".{1,\" + inputCellLength + \"}\", \"g\")) || [];\n\n  otpText = otpText.slice(0, inputCount);\n\n  return otpText;\n};\n\nclass OTPTextView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      focusedInput: 0,\n      otpText: getOTPTextChucks(\n        props.inputCount,\n        props.inputCellLength,\n        props.defaultValue\n      ),\n    };\n\n    this.inputs = [];\n  }\n\n  basicValidation = (text) => {\n    const validText = /^[0-9a-zA-Z]+$/;\n    return text.match(validText);\n  };\n\n  onTextChange = (text, i) => {\n    const { inputCellLength, inputCount, handleTextChange } = this.props;\n\n    if (text && !this.basicValidation(text)) {\n      return;\n    }\n\n    this.setState(\n      (prevState) => {\n        let { otpText } = prevState;\n\n        otpText[i] = text;\n        return {\n          otpText,\n        };\n      },\n      () => {\n        handleTextChange(this.state.otpText.join(\"\"));\n        if (text.length === inputCellLength && i !== inputCount - 1) {\n          this.inputs[i + 1].focus();\n        }\n      }\n    );\n  };\n\n  onInputFocus = (i) => {\n    const { otpText } = this.state;\n\n    const prevIndex = i - 1;\n\n    if (prevIndex > -1 && !otpText[prevIndex] && !otpText.join(\"\")) {\n      this.inputs[prevIndex].focus();\n      return;\n    }\n\n    this.setState({ focusedInput: i });\n  };\n\n  onKeyPress = (e, i) => {\n    const val = this.state.otpText[i] || \"\";\n\n    if (e.nativeEvent.key === \"Backspace\" && i !== 0 && !(val.length - 1)) {\n      this.inputs[i - 1].focus();\n    }\n  };\n\n  clear = () => {\n    this.setState(\n      {\n        otpText: [],\n      },\n      () => {\n        this.inputs[0].focus();\n      }\n    );\n  };\n\n  setValue = (value) => {\n    const { inputCount, inputCellLength } = this.props;\n    this.setState(\n      {\n        otpText: getOTPTextChucks(inputCount, inputCellLength, value),\n      },\n      () => {\n        this.props.handleTextChange(value);\n      }\n    );\n  };\n\n  render() {\n    const {\n      inputCount,\n      offTintColor,\n      tintColor,\n      defaultValue,\n      inputCellLength,\n      containerStyle,\n      textInputStyle,\n      keyboardType,\n      ...textInputProps\n    } = this.props;\n\n    const { focusedInput, otpText } = this.state;\n\n    const TextInputs = [];\n\n    for (let i = 0; i < inputCount; i += 1) {\n      const inputStyle = [\n        styles.textInput,\n        textInputStyle,\n        { borderColor: offTintColor },\n      ];\n\n      if (focusedInput === i) {\n        inputStyle.push({ borderColor: tintColor });\n      }\n\n      TextInputs.push(\n        <TextInput\n          ref={(e) => {\n            this.inputs[i] = e;\n          }}\n          key={i}\n          autoCorrect={false}\n          keyboardType={keyboardType}\n          autoFocus={false}\n          value={otpText[i] || \"\"}\n          style={inputStyle}\n          maxLength={this.props.inputCellLength}\n          onFocus={() => this.onInputFocus(i)}\n          onChangeText={(text) => this.onTextChange(text, i)}\n          multiline={false}\n          onKeyPress={(e) => this.onKeyPress(e, i)}\n          {...textInputProps}\n        />\n      );\n    }\n\n    return <View style={[styles.container, containerStyle]}>{TextInputs}</View>;\n  }\n}\n\nOTPTextView.propTypes = {\n  defaultValue: PropTypes.string,\n  inputCount: PropTypes.number,\n  containerStyle: PropTypes.any,\n  textInputStyle: PropTypes.any,\n  inputCellLength: PropTypes.number,\n  tintColor: PropTypes.string,\n  offTintColor: PropTypes.string,\n  handleTextChange: PropTypes.func,\n  inputType: PropTypes.string,\n  keyboardType: PropTypes.string,\n};\n\nOTPTextView.defaultProps = {\n  defaultValue: \"\",\n  inputCount: 4,\n  tintColor: \"#3CB371\",\n  offTintColor: \"#DCDCDC\",\n  inputCellLength: 1,\n  containerStyle: {},\n  textInputStyle: {},\n  handleTextChange: () => {},\n  keyboardType: \"numeric\",\n};\n\nexport default OTPTextView;\n"]},"metadata":{},"sourceType":"module"}